(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{168:function(n,s,e){"use strict";e.r(s);var t=e(0),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"npm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm","aria-hidden":"true"}},[n._v("#")]),n._v(" npm")]),n._v(" "),e("h2",{attrs:{id:"nvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nvm","aria-hidden":"true"}},[n._v("#")]),n._v(" nvm")]),n._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("# nvm 常用命令\nnvm install stable ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)\nnvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4\nnvm uninstall <version> ## 删除已安装的指定版本，语法与install类似\nnvm use <version> ## 切换使用指定的版本node\nnvm ls ## 列出所有安装的版本\nnvm ls-remote ## 列出所有远程服务器的版本（官方node version list）\nnvm current ## 显示当前的版本\nnvm alias <name> <version> ## 给不同的版本号添加别名\nnvm unalias <name> ## 删除已定义的别名\nnvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包\n\nnvm alias default 8.4.0   ## 设置默认版本\n")])])]),e("h2",{attrs:{id:"npm-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-2","aria-hidden":"true"}},[n._v("#")]),n._v(" npm")]),n._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("# 查看全局安装的包\nnpm ls -g --depth 0 2>error.log   # 错误输出到 error.log\n\n# config\nnpm config --help\nnpm config list --json\n\n# link\n1. 直接在项目内 npm link path/to/module-name\n2. 在本地的模块(如 module-name)内执行 npm link, link 到全局, 再进入依赖该模块的项目内执行 npm link module-name\n3. 结束后 npm unlink module-name\n\n查看当前项目 link 的包\nnpm ls --depth=0 --link=true\n")])])]),e("h2",{attrs:{id:"npm-scrips"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-scrips","aria-hidden":"true"}},[n._v("#")]),n._v(" npm scrips")]),n._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('npm run script1.js & npm run script2.js   # 并行执行\nnpm run script1.js && npm run script2.js   # 继发执行（即只有前一个任务成功，才执行下一个任务）\n\n# 钩子\n"prebuild": "echo I run before the build script"\n"build": "cross-env NODE_ENV=production webpack" \n"postbuild": "echo I run after the build script"\nnpm run build # 等于 npm run prebuild && npm run build && npm run postbuild\n\n# npm 默认提供的钩子\nprepublish，postpublish\npreinstall，postinstall\npreuninstall，postuninstall\npreversion，postversion\npretest，posttest\nprestop，poststop\nprestart，poststart\nprerestart，postrestart\n')])])]),e("h2",{attrs:{id:"常用模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用模块","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用模块")]),n._v(" "),e("h3",{attrs:{id:"local-web-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#local-web-server","aria-hidden":"true"}},[n._v("#")]),n._v(" local-web-server")]),n._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("npm install -g local-web-server\nws --help   # 查看使用方法\nws -d build -p 3001  # 在build文件夹内启动 localhost:3001, 没有-d的话就在本文件夹内\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);